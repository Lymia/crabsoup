-- Crabsoup APIs
declare CSV: typeof(CSV) & {
    unsafe_from_string: (string) -> {{string}}?,
}
declare JSON: typeof(JSON) & {
    unsafe_from_string: (string) -> any?,
}
declare String: typeof(String) & {
    is_valid_utf8: (str: string) -> boolean,
    length: (str: string) -> number,
    length_ascii: (str: string) -> number,
    trim: (s: string) -> string,
    to_number: typeof(tonumber),
    join: (sep: string, list: { string }) -> string,
    starts_with: (s: string, prefix: string) -> boolean,
    ends_with: (s: string, prefix: string) -> boolean,
}
declare Sys: typeof(Sys) & {
    run_program: (string) -> (),
    run_program_get_exit_code: (string) -> number,
    get_program_output: (string) -> string,
    random: (number) -> number,
}
declare Table: typeof(Table) & {
    has_key: <K, V>(value: { [K]: V }, key: K) -> boolean,
}
declare TOML: typeof(TOML) & {
    unsafe_from_string: (string) -> any?,
}
declare Value: typeof(Value) & {
    is_nil: <T>(value: T) -> boolean,
    is_float: <T>(value: T) -> boolean,
    is_string: <T>(value: T) -> boolean,
    is_table: <T>(value: T) -> boolean,
    is_html: <T>(value: T) -> boolean,
}
declare YAML: typeof(YAML) & {
    unsafe_from_string: (string) -> any?,
}

-- HTML library
declare HTML: typeof(HTML) & {
    select_any_of: (node: NodeRef, selectors: {string}) -> NodeRef,
    select_all_of: (node: NodeRef, selectors: {string}) -> {NodeRef},
    matches_selector: (root: NodeRef, node: NodeRef, selector: string) -> boolean,
    matches_any_of_selectors: (root: NodeRef, node: NodeRef, selectors: {string}) -> boolean,
    append_root: (parent: NodeRef, child: NodeRef) -> (),
    prepend_root: (parent: NodeRef, child: NodeRef) -> (),
    replace: (from: NodeRef, with: NodeRef) -> (),
    clone_content: (NodeRef) -> NodeRef,
    clone_document: (NodeRef) -> NodeRef,
}
